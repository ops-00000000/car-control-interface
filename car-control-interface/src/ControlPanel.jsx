import React, { useState, useEffect } from 'react';
import {
    Box,
    Grid,
    Typography,
    Button,
    Select,
    MenuItem,
    TextField,
    Card,
    CardContent,
    LinearProgress,
    IconButton,
    Tooltip,
    Snackbar,
    CircularProgress,
} from '@mui/material';
import {
    Speed as SpeedIcon,
    BatteryChargingFull as BatteryIcon,
    CameraAlt as CameraIcon,
    Refresh as RefreshIcon,
    PowerSettingsNew as PowerOffIcon,
    Send as SendIcon,
    SettingsInputHdmi as PortIcon,
    Brightness4 as Brightness4Icon,
    Brightness7 as Brightness7Icon,
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';


function ControlPanel() {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [port, setPort] = useState(localStorage.getItem('selectedPort') || '');
    const [command, setCommand] = useState('');
    const [response, setResponse] = useState('');
    const [selectedCamera, setSelectedCamera] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [commandError, setCommandError] = useState(false);
    const [darkMode, setDarkMode] = useState(false);

    const theme = useTheme();

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    const toggleDarkMode = () => {
        setDarkMode(!darkMode);
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
    useEffect(() => {
        theme.palette.mode = darkMode ? 'dark' : 'light';
    }, [darkMode, theme.palette]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    const handlePortChange = (event) => {
        const selectedPort = event.target.value;
        setPort(selectedPort);
        localStorage.setItem('selectedPort', selectedPort);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    const handleSendCommand = () => {
        if (command.trim() === '') {
            setCommandError(true);
            return;
        }
        setCommandError(false);
        setIsLoading(true);
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        setTimeout(() => {
            setResponse(`–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É: ${command}`);
            setIsLoading(false);
            setSnackbarOpen(true);
        }, 2000);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    const handleCommandChange = (e) => {
        setCommand(e.target.value);
        setCommandError(e.target.value.trim() === '');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞–º–µ—Ä–µ
    const handleCameraClick = (cam) => {
        setSelectedCamera(selectedCamera === cam ? null : cam);
    };

    const cameraList = ['Front', 'Left', 'Back', 'Right'];

    return (
        <Box sx={{ padding: 2 }}>
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
            <Grid container justifyContent="space-between" alignItems="center">
                <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                    üöó –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–æ–π
                </Typography>
                <Box display="flex" alignItems="center">
                    {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */}
                    <Tooltip title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
                        <IconButton onClick={toggleDarkMode} color="inherit">
                            {theme.palette.mode === 'dark' ? (
                                <Brightness7Icon />
                            ) : (
                                <Brightness4Icon />
                            )}
                        </IconButton>
                    </Tooltip>
                    <Tooltip title="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è">
                        <Button
                            variant="contained"
                            color="secondary"
                            startIcon={<RefreshIcon />}
                            sx={{ mr: 2 }}
                        >
                            –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        </Button>
                    </Tooltip>
                    <Tooltip title="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è">
                        <Button
                            variant="contained"
                            color="error"
                            startIcon={<PowerOffIcon />}
                        >
                            –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
                        </Button>
                    </Tooltip>
                </Box>
            </Grid>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
            <Grid container spacing={2} sx={{ mt: 2 }}>
                {/* –ë–ª–æ–∫ —Å –∫–∞–º–µ—Ä–∞–º–∏ */}
                <Grid item xs={12} md={7}>
                    <Card sx={{ height: '100%', borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üì∑ –ö–∞–º–µ—Ä—ã
                            </Typography>
                            <Box>
                                {selectedCamera ? (
                                    <>
                                        {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏ */}
                                        <Grid container spacing={1}>
                                            {cameraList
                                                .filter((cam) => cam !== selectedCamera)
                                                .map((cam) => (
                                                    <Grid item xs={4} key={cam}>
                                                        <Box
                                                            onClick={() => handleCameraClick(cam)}
                                                            sx={{
                                                                position: 'relative',
                                                                overflow: 'hidden',
                                                                borderRadius: 2,
                                                                cursor: 'pointer',
                                                                '&:hover': {
                                                                    boxShadow: 6,
                                                                    transform: 'scale(1.02)',
                                                                    transition: 'all 0.3s ease-in-out',
                                                                },
                                                                transition: 'all 0.3s ease-in-out',
                                                            }}
                                                        >
                                                            <Box
                                                                sx={{
                                                                    backgroundColor: '#1e1e1e',
                                                                    height: 80,
                                                                    display: 'flex',
                                                                    alignItems: 'center',
                                                                    justifyContent: 'center',
                                                                    color: '#fff',
                                                                    borderRadius: 2,
                                                                    boxShadow: 3,
                                                                    transition: 'all 0.3s ease-in-out',
                                                                }}
                                                            >
                                                                {`–ö–∞–º–µ—Ä–∞ ${cam}`}
                                                            </Box>
                                                        </Box>
                                                    </Grid>
                                                ))}
                                        </Grid>
                                        {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ */}
                                        <Box
                                            onClick={() => handleCameraClick(selectedCamera)}
                                            sx={{
                                                position: 'relative',
                                                overflow: 'hidden',
                                                borderRadius: 2,
                                                cursor: 'pointer',
                                                mt: 1,
                                                '&:hover': {
                                                    boxShadow: 6,
                                                    transform: 'scale(1.01)',
                                                    transition: 'all 0.3s ease-in-out',
                                                },
                                                transition: 'all 0.3s ease-in-out',
                                            }}
                                        >
                                            <Box
                                                sx={{
                                                    backgroundColor: '#1e1e1e',
                                                    height: 320,
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    justifyContent: 'center',
                                                    color: '#fff',
                                                    borderRadius: 2,
                                                    boxShadow: 3,
                                                    transition: 'all 0.3s ease-in-out',
                                                }}
                                            >
                                                {`–ö–∞–º–µ—Ä–∞ ${selectedCamera}`}
                                            </Box>
                                        </Box>
                                    </>
                                ) : (
                                    <Grid container spacing={1}>
                                        {cameraList.map((cam) => (
                                            <Grid item xs={6} key={cam}>
                                                <Box
                                                    onClick={() => handleCameraClick(cam)}
                                                    sx={{
                                                        position: 'relative',
                                                        overflow: 'hidden',
                                                        borderRadius: 2,
                                                        cursor: 'pointer',
                                                        '&:hover': {
                                                            boxShadow: 6,
                                                            transform: 'scale(1.02)',
                                                            transition: 'all 0.3s ease-in-out',
                                                        },
                                                        transition: 'all 0.3s ease-in-out',
                                                    }}
                                                >
                                                    <Box
                                                        sx={{
                                                            backgroundColor: '#1e1e1e',
                                                            height: 180,
                                                            display: 'flex',
                                                            alignItems: 'center',
                                                            justifyContent: 'center',
                                                            color: '#fff',
                                                            borderRadius: 2,
                                                            boxShadow: 3,
                                                            transition: 'all 0.3s ease-in-out',
                                                        }}
                                                    >
                                                        {`–ö–∞–º–µ—Ä–∞ ${cam}`}
                                                    </Box>
                                                </Box>
                                            </Grid>
                                        ))}
                                    </Grid>
                                )}
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <Grid item xs={12} md={5}>
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ */}
                    <Card sx={{ mb: 2, borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ
                            </Typography>
                            <Box display="flex" alignItems="center" sx={{ mb: 1 }}>
                                <SpeedIcon sx={{ mr: 1 }} color="action" />
                                <Typography sx={{ flexGrow: 1 }}>–°–∫–æ—Ä–æ—Å—Ç—å: 84 –∫–º/—á</Typography>
                                <LinearProgress
                                    variant="determinate"
                                    value={84}
                                    sx={{
                                        width: '30%',
                                        height: 10,
                                        borderRadius: 5,
                                        animation: 'progressAnimation 2s ease-in-out',
                                    }}
                                />
                            </Box>
                            <Box display="flex" alignItems="center" sx={{ mb: 1 }}>
                                <BatteryIcon sx={{ mr: 1 }} color="action" />
                                <Typography sx={{ flexGrow: 1 }}>–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: 26%</Typography>
                                <LinearProgress
                                    variant="determinate"
                                    value={26}
                                    color="secondary"
                                    sx={{
                                        width: '30%',
                                        height: 10,
                                        borderRadius: 5,
                                        animation: 'progressAnimation 2s ease-in-out',
                                    }}
                                />
                            </Box>
                            <Box sx={{ mt: 2 }}>
                                {['Cam_01', 'Cam_02', 'Cam_03', 'Cam_04'].map((cam) => (
                                    <Box key={cam} display="flex" alignItems="center" sx={{ mb: 0.5 }}>
                                        <CameraIcon sx={{ mr: 1 }} color="action" />
                                        <Typography>{`${cam}: Enabled`}</Typography>
                                    </Box>
                                ))}
                            </Box>
                        </CardContent>
                    </Card>

                    {/* GPS-—Ç—Ä–µ–∫–µ—Ä */}
                    <Card sx={{ mb: 2, borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üó∫Ô∏è GPS-—Ç—Ä–µ–∫–µ—Ä
                            </Typography>
                            <MapContainer
                                center={[51.505, -0.09]}
                                zoom={13}
                                style={{ height: 200, width: '100%', marginTop: 10 }}
                            >
                                <TileLayer
                                    attribution='&copy; OpenStreetMap contributors'
                                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                                />
                                <Marker position={[51.505, -0.09]}>
                                    <Popup>–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è</Popup>
                                </Marker>
                            </MapContainer>
                        </CardContent>
                    </Card>
                </Grid>

                {/* –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º */}
                <Grid item xs={12}>
                    <Grid container spacing={2}>
                        {/* –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—à–∏–Ω–µ */}
                        <Grid item xs={12} md={7}>
                            <Card sx={{ borderRadius: 4 }}>
                                <CardContent>
                                    <Typography variant="h6" gutterBottom>
                                        üíª –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—à–∏–Ω–µ
                                    </Typography>
                                    <Box display="flex" alignItems="center">
                                        <TextField
                                            label="–ö–æ–º–∞–Ω–¥–∞"
                                            value={command}
                                            onChange={handleCommandChange}
                                            error={commandError}
                                            helperText={commandError ? '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' : ''}
                                            sx={{ flexGrow: 1, mr: 2 }}
                                        />
                                        <Button
                                            variant="contained"
                                            endIcon={isLoading ? <CircularProgress size={20} /> : <SendIcon />}
                                            onClick={handleSendCommand}
                                            disabled={isLoading}
                                        >
                                            {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                                        </Button>
                                    </Box>
                                    {response && (
                                        <Box sx={{ mt: 2 }}>
                                            <Typography variant="subtitle1">–û—Ç–≤–µ—Ç –æ—Ç –º–∞—à–∏–Ω—ã:</Typography>
                                            <Typography>{response}</Typography>
                                        </Box>
                                    )}
                                </CardContent>
                            </Card>
                        </Grid>

                        {/* –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                        <Grid item xs={12} md={5}>
                            <Card sx={{ borderRadius: 4 }}>
                                <CardContent>
                                    <Typography variant="h6" gutterBottom>
                                        üîå –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                                    </Typography>
                                    <Box display="flex" alignItems="center">
                                        <PortIcon sx={{ mr: 1 }} color="action" />
                                        <Select
                                            value={port}
                                            onChange={handlePortChange}
                                            sx={{ flexGrow: 1, mr: 2 }}
                                        >
                                            <MenuItem value="port_1">port_1</MenuItem>
                                            <MenuItem value="port_2">port_2</MenuItem>
                                            <MenuItem value="port_3">port_3</MenuItem>
                                            <MenuItem value="port_4">port_4</MenuItem>
                                        </Select>
                                        <Button variant="contained" color="primary">
                                            –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                                        </Button>
                                    </Box>
                                </CardContent>
                            </Card>
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Snackbar */}
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={6000}
                onClose={() => setSnackbarOpen(false)}
                message="–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            />
        </Box>
    );
}

export default ControlPanel;
