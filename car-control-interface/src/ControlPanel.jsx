// src/ControlPanel.jsx
import React, { useState, useEffect } from 'react';
import {
    Box,
    Grid,
    Typography,
    Button,
    Select,
    MenuItem,
    TextField,
    Card,
    CardContent,
    LinearProgress,
    IconButton,
    Tooltip,
    Snackbar,
    CircularProgress,
} from '@mui/material';
import {
    Speed as SpeedIcon,
    BatteryChargingFull as BatteryIcon,
    CameraAlt as CameraIcon,
    Refresh as RefreshIcon,
    PowerSettingsNew as PowerOffIcon,
    Send as SendIcon,
    SettingsInputHdmi as PortIcon,
    Brightness4 as Brightness4Icon,
    Brightness7 as Brightness7Icon,
    CheckCircle as CheckCircleIcon,
    Error as ErrorIcon,
    HourglassEmpty as HourglassEmptyIcon,
} from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { useWebSocketClient } from './useWebSocketClient';
import { useKeycloak } from './useKeycloak';

function ControlPanel({ darkMode, toggleDarkMode }) {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [port, setPort] = useState(localStorage.getItem('selectedPort') || '');
    const [command, setCommand] = useState('');
    const [response, setResponse] = useState('');
    const [selectedCamera, setSelectedCamera] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [commandError, setCommandError] = useState(false);
    const [portStatus, setPortStatus] = useState('idle'); // 'idle', 'connecting', 'error', 'ready'
    const [cameraEnabled, setCameraEnabled] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–º–µ—Ä

    const theme = useTheme();

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Keycloak
    const { keycloak } = useKeycloak();

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    const { messages, sendMessage } = useWebSocketClient(keycloak.token);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    const handlePortChange = (event) => {
        const selectedPort = event.target.value;
        setPort(selectedPort);
        localStorage.setItem('selectedPort', selectedPort);
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        setPortStatus('idle');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    const handleSendCommand = () => {
        if (command.trim() === '') {
            setCommandError(true);
            return;
        }
        setCommandError(false);
        setIsLoading(true);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ WebSocket
        sendMessage(command);
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setCommand('');
        setIsLoading(false);
        setResponse('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        setSnackbarOpen(true);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    const handleCommandChange = (e) => {
        setCommand(e.target.value);
        setCommandError(e.target.value.trim() === '');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞–º–µ—Ä–µ
    const handleCameraClick = (cam) => {
        if (!cameraEnabled) return; // –ö–∞–º–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setSelectedCamera(selectedCamera === cam ? null : cam);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É
    const handleConnectPort = () => {
        if (!port) return;
        setPortStatus('connecting');
        setCameraEnabled(false); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 2 –º–∏–Ω—É—Ç—ã
        const connectTimeout = setTimeout(() => {
            setPortStatus('error');
            setSnackbarOpen(true);
            setCameraEnabled(false);
        }, 120000); // 2 –º–∏–Ω—É—Ç—ã

        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        const successTimeout = setTimeout(() => {
            clearTimeout(connectTimeout);
            setPortStatus('ready');
            setSnackbarOpen(true);
            setCameraEnabled(true); // –í–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        }, 5000);

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞
        return () => {
            clearTimeout(connectTimeout);
            clearTimeout(successTimeout);
        };
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—Ä—Ç–∞
    useEffect(() => {
        if (port) {
            handleConnectPort();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [port]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    useEffect(() => {
        if (messages.length > 0) {
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            setResponse(`–û—Ç–≤–µ—Ç –æ—Ç –º–∞—à–∏–Ω—ã: ${messages[messages.length - 1]}`);
            setSnackbarOpen(true);
        }
    }, [messages]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const handleLogout = () => {
        keycloak.logout();
    };

    const cameraList = ['Front', 'Left', 'Back', 'Right'];

    return (
        <Box sx={{ padding: 2 }}>
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
            <Grid container justifyContent="space-between" alignItems="center">
                <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                    üöó –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–æ–π
                </Typography>
                <Box display="flex" alignItems="center">
                    {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */}
                    <Tooltip title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
                        <IconButton onClick={toggleDarkMode} color="inherit">
                            {darkMode ? <Brightness7Icon /> : <Brightness4Icon />}
                        </IconButton>
                    </Tooltip>
                    <Tooltip title="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è">
                        <Button
                            variant="contained"
                            color="secondary"
                            startIcon={<RefreshIcon />}
                            sx={{ mr: 2 }}
                            onClick={() => window.location.reload()}
                        >
                            –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        </Button>
                    </Tooltip>
                    <Tooltip title="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è">
                        <Button
                            variant="contained"
                            color="error"
                            startIcon={<PowerOffIcon />}
                            onClick={handleLogout} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—Ö–æ–¥–∞
                        >
                            –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
                        </Button>
                    </Tooltip>
                </Box>
            </Grid>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
            <Grid container spacing={2} sx={{ mt: 2 }}>
                {/* –ë–ª–æ–∫ —Å –∫–∞–º–µ—Ä–∞–º–∏ */}
                <Grid item xs={12} md={7}>
                    <Card sx={{ height: '100%', borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üì∑ –ö–∞–º–µ—Ä—ã
                            </Typography>
                            <Box>
                                {selectedCamera ? (
                                    <>
                                        {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏ */}
                                        <Grid container spacing={1}>
                                            {cameraList
                                                .filter((cam) => cam !== selectedCamera)
                                                .map((cam) => (
                                                    <Grid item xs={4} key={cam}>
                                                        <Tooltip title={`–û—Ç–∫—Ä—ã—Ç—å –ö–∞–º–µ—Ä—É ${cam}`}>
                                                            <Box
                                                                onClick={() => handleCameraClick(cam)}
                                                                sx={{
                                                                    position: 'relative',
                                                                    overflow: 'hidden',
                                                                    borderRadius: 2,
                                                                    cursor: cameraEnabled ? 'pointer' : 'not-allowed',
                                                                    opacity: cameraEnabled ? 1 : 0.5,
                                                                    '&:hover': cameraEnabled
                                                                        ? {
                                                                            boxShadow: 6,
                                                                            transform: 'scale(1.02)',
                                                                            transition: 'all 0.3s ease-in-out',
                                                                        }
                                                                        : {},
                                                                    transition: 'all 0.3s ease-in-out',
                                                                }}
                                                            >
                                                                <Box
                                                                    sx={{
                                                                        backgroundColor: '#1e1e1e',
                                                                        height: 80,
                                                                        display: 'flex',
                                                                        alignItems: 'center',
                                                                        justifyContent: 'center',
                                                                        color: '#fff',
                                                                        borderRadius: 2,
                                                                        boxShadow: 3,
                                                                        transition: 'all 0.3s ease-in-out',
                                                                    }}
                                                                >
                                                                    {`–ö–∞–º–µ—Ä–∞ ${cam}`}
                                                                </Box>
                                                            </Box>
                                                        </Tooltip>
                                                    </Grid>
                                                ))}
                                        </Grid>
                                        {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ */}
                                        <Box
                                            onClick={() => handleCameraClick(selectedCamera)}
                                            sx={{
                                                position: 'relative',
                                                overflow: 'hidden',
                                                borderRadius: 2,
                                                cursor: cameraEnabled ? 'pointer' : 'not-allowed',
                                                opacity: cameraEnabled ? 1 : 0.5,
                                                mt: 1,
                                                '&:hover': cameraEnabled
                                                    ? {
                                                        boxShadow: 6,
                                                        transform: 'scale(1.01)',
                                                        transition: 'all 0.3s ease-in-out',
                                                    }
                                                    : {},
                                                transition: 'all 0.3s ease-in-out',
                                            }}
                                        >
                                            <Tooltip title={`–ó–∞–∫—Ä—ã—Ç—å –ö–∞–º–µ—Ä—É ${selectedCamera}`}>
                                                <Box
                                                    sx={{
                                                        backgroundColor: '#1e1e1e',
                                                        height: 320,
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                        color: '#fff',
                                                        borderRadius: 2,
                                                        boxShadow: 3,
                                                        transition: 'all 0.3s ease-in-out',
                                                    }}
                                                >
                                                    {`–ö–∞–º–µ—Ä–∞ ${selectedCamera}`}
                                                </Box>
                                            </Tooltip>
                                        </Box>
                                    </>
                                ) : (
                                    <Grid container spacing={1}>
                                        {cameraList.map((cam) => (
                                            <Grid item xs={6} key={cam}>
                                                <Tooltip title={`–û—Ç–∫—Ä—ã—Ç—å –ö–∞–º–µ—Ä—É ${cam}`}>
                                                    <Box
                                                        onClick={() => handleCameraClick(cam)}
                                                        sx={{
                                                            position: 'relative',
                                                            overflow: 'hidden',
                                                            borderRadius: 2,
                                                            cursor: cameraEnabled ? 'pointer' : 'not-allowed',
                                                            opacity: cameraEnabled ? 1 : 0.5,
                                                            '&:hover': cameraEnabled
                                                                ? {
                                                                    boxShadow: 6,
                                                                    transform: 'scale(1.02)',
                                                                    transition: 'all 0.3s ease-in-out',
                                                                }
                                                                : {},
                                                            transition: 'all 0.3s ease-in-out',
                                                        }}
                                                    >
                                                        <Box
                                                            sx={{
                                                                backgroundColor: '#1e1e1e',
                                                                height: 180,
                                                                display: 'flex',
                                                                alignItems: 'center',
                                                                justifyContent: 'center',
                                                                color: '#fff',
                                                                borderRadius: 2,
                                                                boxShadow: 3,
                                                                transition: 'all 0.3s ease-in-out',
                                                            }}
                                                        >
                                                            {`–ö–∞–º–µ—Ä–∞ ${cam}`}
                                                        </Box>
                                                    </Box>
                                                </Tooltip>
                                            </Grid>
                                        ))}
                                    </Grid>
                                )}
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <Grid item xs={12} md={5}>
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ */}
                    <Card sx={{ mb: 2, borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ
                            </Typography>
                            <Box display="flex" alignItems="center" sx={{ mb: 1 }}>
                                <SpeedIcon sx={{ mr: 1 }} color="action" />
                                <Typography sx={{ flexGrow: 1 }}>–°–∫–æ—Ä–æ—Å—Ç—å: 84 –∫–º/—á</Typography>
                                <LinearProgress
                                    variant="determinate"
                                    value={84}
                                    sx={{
                                        width: '30%',
                                        height: 10,
                                        borderRadius: 5,
                                        animation: 'progressAnimation 2s ease-in-out',
                                    }}
                                />
                            </Box>
                            <Box display="flex" alignItems="center" sx={{ mb: 1 }}>
                                <BatteryIcon sx={{ mr: 1 }} color="action" />
                                <Typography sx={{ flexGrow: 1 }}>–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: 26%</Typography>
                                <LinearProgress
                                    variant="determinate"
                                    value={26}
                                    color="secondary"
                                    sx={{
                                        width: '30%',
                                        height: 10,
                                        borderRadius: 5,
                                        animation: 'progressAnimation 2s ease-in-out',
                                    }}
                                />
                            </Box>
                            <Box sx={{ mt: 2 }}>
                                {['Cam_01', 'Cam_02', 'Cam_03', 'Cam_04'].map((cam) => (
                                    <Box key={cam} display="flex" alignItems="center" sx={{ mb: 0.5 }}>
                                        <CameraIcon sx={{ mr: 1 }} color="action" />
                                        <Typography>{`${cam}: Enabled`}</Typography>
                                    </Box>
                                ))}
                            </Box>
                        </CardContent>
                    </Card>

                    {/* GPS-—Ç—Ä–µ–∫–µ—Ä */}
                    <Card sx={{ mb: 2, borderRadius: 4 }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üó∫Ô∏è GPS-—Ç—Ä–µ–∫–µ—Ä
                            </Typography>
                            <MapContainer
                                center={[51.505, -0.09]}
                                zoom={13}
                                style={{ height: 200, width: '100%', marginTop: 10 }}
                            >
                                <TileLayer
                                    attribution="" // –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ü–∏—é
                                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                                />
                                <Marker position={[51.505, -0.09]}>
                                    <Popup>–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è</Popup>
                                </Marker>
                            </MapContainer>
                        </CardContent>
                    </Card>
                </Grid>

                {/* –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º */}
                <Grid item xs={12}>
                    <Grid container spacing={2}>
                        {/* –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—à–∏–Ω–µ */}
                        <Grid item xs={12} md={7}>
                            <Card sx={{ borderRadius: 4 }}>
                                <CardContent>
                                    <Typography variant="h6" gutterBottom>
                                        üíª –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–∞—à–∏–Ω–µ
                                    </Typography>
                                    <Box display="flex" alignItems="center">
                                        <TextField
                                            label="–ö–æ–º–∞–Ω–¥–∞"
                                            value={command}
                                            onChange={handleCommandChange}
                                            error={commandError}
                                            helperText={commandError ? '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' : ''}
                                            sx={{ flexGrow: 1, mr: 2 }}
                                        />
                                        <Button
                                            variant="contained"
                                            endIcon={isLoading ? <CircularProgress size={20} /> : <SendIcon />}
                                            onClick={handleSendCommand}
                                            disabled={isLoading || !cameraEnabled}
                                        >
                                            {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                                        </Button>
                                    </Box>
                                    {response && (
                                        <Box sx={{ mt: 2 }}>
                                            <Typography variant="subtitle1">–û—Ç–≤–µ—Ç –æ—Ç –º–∞—à–∏–Ω—ã:</Typography>
                                            <Typography>{response}</Typography>
                                        </Box>
                                    )}
                                </CardContent>
                            </Card>
                        </Grid>

                        {/* –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                        <Grid item xs={12} md={5}>
                            <Card sx={{ borderRadius: 4 }}>
                                <CardContent>
                                    <Typography variant="h6" gutterBottom>
                                        üîå –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                                    </Typography>
                                    <Box display="flex" alignItems="center">
                                        <PortIcon sx={{ mr: 1 }} color="action" />
                                        <Select
                                            value={port}
                                            onChange={handlePortChange}
                                            sx={{ flexGrow: 1, mr: 2 }}
                                            displayEmpty
                                        >
                                            <MenuItem value="">
                                                <em>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç</em>
                                            </MenuItem>
                                            <MenuItem value="port_1">port_1</MenuItem>
                                            <MenuItem value="port_2">port_2</MenuItem>
                                            <MenuItem value="port_3">port_3</MenuItem>
                                            <MenuItem value="port_4">port_4</MenuItem>
                                        </Select>
                                        <Button
                                            variant="contained"
                                            color="primary"
                                            onClick={handleConnectPort}
                                            disabled={portStatus === 'connecting' || portStatus === 'ready' || port === ''}
                                        >
                                            –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                                        </Button>
                                    </Box>

                                    {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                                    <Box sx={{ mt: 2 }}>
                                        {portStatus === 'connecting' && (
                                            <Box display="flex" alignItems="center">
                                                <HourglassEmptyIcon color="action" sx={{ mr: 1 }} />
                                                <Typography>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</Typography>
                                                <Box
                                                    sx={{
                                                        display: 'flex',
                                                        ml: 1,
                                                        '& > *': {
                                                            marginLeft: '2px',
                                                            width: '6px',
                                                            height: '6px',
                                                            backgroundColor: 'secondary.main',
                                                            borderRadius: '50%',
                                                            animation: 'dotFlashing 1.4s infinite both',
                                                        },
                                                        '& > *:nth-of-type(1)': {
                                                            animationDelay: '-0.32s',
                                                        },
                                                        '& > *:nth-of-type(2)': {
                                                            animationDelay: '-0.16s',
                                                        },
                                                    }}
                                                >
                                                    <Box />
                                                    <Box />
                                                    <Box />
                                                </Box>
                                            </Box>
                                        )}
                                        {portStatus === 'error' && (
                                            <Box display="flex" alignItems="center" sx={{ color: 'error.main' }}>
                                                <ErrorIcon sx={{ mr: 1 }} />
                                                <Typography>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</Typography>
                                            </Box>
                                        )}
                                        {portStatus === 'ready' && (
                                            <Box display="flex" alignItems="center" sx={{ color: 'success.main' }}>
                                                <CheckCircleIcon sx={{ mr: 1 }} />
                                                <Typography>–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ</Typography>
                                            </Box>
                                        )}
                                    </Box>
                                </CardContent>
                            </Card>
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Snackbar */}
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={6000}
                onClose={() => setSnackbarOpen(false)}
                message={
                    portStatus === 'error'
                        ? '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É'
                        : response
                }
                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
            />
        </Box>
    );
}

export default ControlPanel;
